package hof

import (
	"fmt"
	"time"
	"tpf-aram-hof/cmd/web"
)

type Player struct {
	ID          int       `json:"id"`
	Nickname    string    `json:"nickname"`
	Champion    string    `json:"champion"`
	Description string    `json:"description"`
	GameMode    string    `json:"game_mode"`
	Frag        string    `json:"frag"`
	Date        time.Time `json:"date"`
}

templ HofBase() {
	@web.Base() {
		<h1 class="text-4xl">Hall da Fama</h1>
		<div class="flex flex-row w-full mx-auto mt-8 justify-between">
			<div hx-get="/hof/players" hx-target="this" hx-trigger="load"></div>
			<div>
				@HofForm()
			</div>
		</div>
	}
}

templ HofForm() {
	<h1>Adicionar Player para o Hall da Fama </h1>
	<form hx-post="/hof/player" method="POST" hx-target="#hof-container">
		<input class="bg-gray-200 text-black p-2 border-none rounded-sm" id="name" name="name" type="text"/>
		<button type="submit" class="bg-gray-500 hover:bg-gray-700 text-white py-2 px-4 rounded-sm">Submit</button>
	</form>
	<div id="hof-container" class="p-4 m-4"></div>
}

templ HofSuccessMessage(playerName string) {
	<div _="on click remove me" id="alert-3" class="flex cursor-pointer items-center p-4 mb-4 text-green-800 rounded-sm bg-green-50 dark:bg-gray-800 dark:text-green-400" role="alert">
		<div class="ms-3 text-sm font-medium">
			{ playerName } was added!
		</div>
		<button type="button" class="ms-auto -mx-1.5 -my-1.5 bg-green-50 text-green-500 rounded-sm focus:ring-2 focus:ring-green-400 p-1.5 hover:bg-green-200 inline-flex items-center justify-center h-8 w-8 dark:bg-gray-800 dark:text-green-400 dark:hover:bg-gray-700" data-dismiss-target="#alert-3" aria-label="Close">
			<span class="sr-only">Close</span>
			<svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
				<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path>
			</svg>
		</button>
	</div>
}

templ HofList(players []Player) {
	<div class="relative overflow-x-auto rounded-sm">
		<table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
			<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
				<tr>
					<th scope="col" class="px-6 py-3">
						ID
					</th>
					<th scope="col" class="px-6 py-3">
						Nickname
					</th>
					<th scope="col" class="px-6 py-3">
						Campeão
					</th>
          <th scope="col" class="px-6 py-3">
            Descrição
          </th>
          <th scope="col" class="px-6 py-3">
            Modo de Jogo
          </th>
					<th scope="col" class="px-6 py-3">
						Frag
					</th>
					<th scope="col" class="px-6 py-3">
						Data
					</th>
				</tr>
			</thead>
			<tbody>
				for _, player := range players {
					<tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
						<td class="px-6 py-4">
							{ fmt.Sprint(player.ID) }
						</td>
						<td class="px-6 py-4">
							{ player.Nickname }
						</td>
						<td class="px-6 py-4">
							{ player.Champion }
						</td>
            <td class="px-6 py-4">
              { player.Description }
            </td>
            <td class="px-6 py-4">
              { player.GameMode }
            </td>
						<td class="px-6 py-4">
							{ player.Frag }
						</td>
						<td class="px-6 py-4">
							{ player.Date.Format("02/01/2006") }
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}
